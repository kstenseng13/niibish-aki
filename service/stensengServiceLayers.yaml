openapi: 3.0.3
info:
  title: Niibish Aki
  description: API for everything needed in the Niibish Aki web application.
  version: 1.0.0
paths:
  /user/{userId}:
    get:
      tags:
        - User
      summary: Retrieve user info
      description: Retrieves user information, including address and contact details.
      operationId: getUser
      parameters:
        - name: userId
          in: path
          description: The user's ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid userId specified
          content:
            application/json:
              examples:
                Response:
                  value: |-
                    {
                    "message": "Invalid user specified."
                    }
        '404':
          description: User not found
          content:
            application/json:
              examples:
                Response:
                  value: |-
                    {
                    "message": "User not found."
                    }
    put:
      tags:
        - User
      summary: Update user information.
      description: Updates user details based on the provided user ID.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          description: The user ID to update
          schema:
            type: string
      requestBody:
        description: User details to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user data
          content:
            application/json:
              examples:
                Response:
                  value: |-
                    {
                    "message": "Invalid user data."
                    }
        '404':
          description: User not found
          content:
            application/json:
              examples:
                Response:
                  value: |-
                    {
                    "message": "User not found."
                    }
    delete:
      tags:
        - User
      summary: Delete a user account. This is a stretch goal and not MVP.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The user's ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User successfully deleted
          content:
            application/json:
              examples:
                Response:
                  value: |-
                    {
                    "message": "User successfully deleted."
                    }
        '404':
          description: User not found
          content:
            application/json:
              examples:
                Response:
                  value: |-
                    {
                    "message": "User not found."
                    }
  /user/create:
    post:
      tags:
        - User
      summary: Create a new user.
      description: Creates a new user with hashed password and returns a JWT token.
      operationId: createUser
      requestBody:
        description: User details for account creation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              examples:
                Response:
                  value: |-
                    {
                    "message": "User created successfully",
                    "token": "jwt-token-here",
                    "user": { ... }
                    }
        '400':
          description: Bad request
          content:
            application/json:
              examples:
                Response:
                  value: |-
                    {
                    "message": "Bad request."
                    }
        '409':
          description: Username already exists
          content:
            application/json:
              examples:
                Response:
                  value: |-
                    {
                    "message": "Username already exists!"
                    }
  /user/login:
    post:
      tags:
        - User
      summary: User login
      description: Authenticates a user and returns a JWT token
      operationId: userLogin
      requestBody:
        description: User credentials for authentication
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              examples:
                Response:
                  value: |-
                    {
                    "message": "Login successful",
                    "token": "jwt-token-here",
                    "user": { ... }
                    }
        '401':
          description: Unauthorized - Invalid credentials
          content:
            application/json:
              examples:
                Response:
                  value: |-
                    {
                    "message": "Invalid username or password"
                    }

  /order:
    post:
      tags:
        - Order
      summary: Create a new order
      description: Creates a new order or adds an item to an existing cart.
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Order'
                - type: object
                  properties:
                    userId:
                      type: string
                    item:
                      type: object
      responses:
        '200':
          description: Item added to existing cart
          content:
            application/json:
              examples:
                Response:
                  value: |-
                    {
                    "orderId": "order-id-here"
                    }
        '201':
          description: Order created successfully
          content:
            application/json:
              examples:
                Response:
                  value: |-
                    {
                    "message": "Order created successfully",
                    "orderId": "order-id-here"
                    }
        '400':
          description: Invalid request body
          content:
            application/json:
              examples:
                Response:
                  value: |-
                    {
                    "message": "Order must contain items"
                    }
  /order/{orderId}:
    get:
      tags:
        - Order
      summary: Retrieve an order by ID
      description: Fetches order details using the order's unique ID.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          required: true
          description: The ID of the order
          schema:
            type: string
      responses:
        '200':
          description: Order found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid order ID format
          content:
            application/json:
              examples:
                Response:
                  value: |-
                    {
                    "message": "Invalid order ID format"
                    }
        '404':
          description: Order not found
          content:
            application/json:
              examples:
                Response:
                  value: |-
                    {
                    "message": "Order not found"
                    }

  /order/user/{userId}:
    get:
      tags:
        - Order
      summary: Get all orders for a user
      description: Fetches all completed orders placed by a specific user.
      operationId: getUserOrders
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Invalid user ID format
          content:
            application/json:
              examples:
                Response:
                  value: |-
                    {
                    "message": "Invalid user ID format"
                    }
        '404':
          description: No orders found for user
          content:
            application/json:
              examples:
                Response:
                  value: |-
                    {
                    "message": "No orders found for this user"
                    }
  /menu:
    get:
      tags:
        - Menu
      summary: Retrieve all menu items
      description: Gets a list of all available tea and snack menu items.
      operationId: getMenuItems
      responses:
        '200':
          description: Successfully retrieved menu items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
  /menu/{itemId}:
    get:
      tags:
        - Menu
      summary: Retrieve a menu item by ID
      description: Fetches a specific tea or snack item from the menu.
      operationId: getMenuItemById
      parameters:
        - name: itemId
          in: path
          required: true
          description: The ID of the menu item
          schema:
            type: string
      responses:
        '200':
          description: Menu item found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Menu item not found
          content:
            application/json:
              examples:
                Response:
                  value: |-
                    {
                    "message": "Item not found."
                    }
    put:
      tags:
        - Menu
      summary: Update an item (stretch goal, not MVP)
      description: Updates an item.
      operationId: updateMenuItem
      parameters:
        - name: itemId
          in: path
          required: true
          description: The ID of the item
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: Item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Invalid request body
          content:
            application/json:
              examples:
                Response:
                  value: |-
                    {
                    "message": "Invalid request body."
                    }
        '404':
          description: Menu item not found
          content:
            application/json:
              examples:
                Response:
                  value: |-
                    {
                    "message": "Item not found."
                    }
  /menu/featured:
    get:
      tags:
        - Menu
      summary: Retrieve all featured items
      description: Fetches all featured items from the menu.
      operationId: getFeaturedItems
      responses:
        '200':
          description: Featured items found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'

  /menu/add-ins:
    get:
      tags:
        - Menu
      summary: Retrieve all add-ins
      description: Gets a list of all available add-ins.
      operationId: getAddIns
      responses:
        '200':
          description: Successfully retrieved add-ins
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AddIn'
components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: MongoDB ObjectId
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        password:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          type: object
          properties:
            line1:
              type: string
            line2:
              type: string
              nullable: true
            city:
              type: string
            state:
              type: string
            zipcode:
              type: string
    Order:
      type: object
      properties:
        _id:
          type: string
          description: MongoDB ObjectId
        userId:
          type: string
          description: Reference to a User (_id) or 'guest'
        items:
          type: array
          items:
            type: object
            properties:
              itemId:
                type: string
                description: Reference to an Item (_id)
              name:
                type: string
              category:
                type: integer
                description: Category code (0 = featured, 1 = seasonal, 2 = milk, 3 = fruit, 4 = snacks)
              type:
                type: string
                enum:
                  - Iced
                  - Hot
              size:
                type: string
                enum:
                  - Small
                  - Medium
                  - Large
                  - Extra Large
              addIns:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: Reference to an Add-In (_id)
                    name:
                      type: string
                    amount:
                      type: number
                      format: double
                    price:
                      type: number
                      format: double
              quantity:
                type: integer
              price:
                type: number
                format: double
              totalPrice:
                type: number
                format: double
        bill:
          type: object
          properties:
            subtotal:
              type: number
              format: double
            tax:
              type: number
              format: double
            tip:
              type: number
              format: double
            total:
              type: number
              format: double
        customerInfo:
          type: object
          properties:
            firstName:
              type: string
            lastName:
              type: string
            email:
              type: string
            phone:
              type: string
            address:
              $ref: '#/components/schemas/Address'
        isGuest:
          type: boolean
        tipPercentage:
          type: number
          format: double
        status:
          type: string
          enum:
            - cart
            - pending
            - complete
        createdAt:
          type: string
          format: date-time
    Item:
      type: object
      properties:
        _id:
          type: string
          description: MongoDB ObjectId
        name:
          type: string
        description:
          type: string
        category:
          type: integer
          description: Category code (0 = featured, 1 = seasonal, 2 = milk, 3 = fruit, 4 = snacks)
        price:
          oneOf:
            - type: number
              format: double
            - type: object
              properties:
                $numberDecimal:
                  type: string
        alt:
          type: string
          description: Alt text for the item's image
        reference:
          type: string
          description: APA citation for the item's image source
        image:
          type: string
          description: Path to the image file
    AddIn:
      type: object
      properties:
        _id:
          type: string
          description: MongoDB ObjectId
        name:
          type: string
        amount:
          type: number
          format: double
        description:
          type: string
        price:
          oneOf:
            - type: number
              format: double
            - type: object
              properties:
                $numberDecimal:
                  type: string
    Address:
      type: object
      properties:
        line1:
          type: string
        line2:
          type: string
          nullable: true
        city:
          type: string
        state:
          type: string
        zipcode:
          type: string

