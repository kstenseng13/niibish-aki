{
  "openapi": "3.0.3",
  "info": {
    "title": "Niibish Aki",
    "description": "API for everything needed in the Niibish Aki web application.",
    "version": "0.0.1"
  },
  "paths": {
    "/user/{userId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Retrieve user info",
        "description": "Retrieves user information, including address and contact details.",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user's ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid userId specified",
            "content": {
              "application/json": {
                "examples": {
                  "Response": {
                    "value": "{\n\"message\": \"Invalid user specified.\"\n}"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "examples": {
                  "Response": {
                    "value": "{\n\"message\": \"User not found.\"\n}"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update user information.",
        "description": "Updates user details based on the provided user ID.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The user ID to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User details to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user data",
            "content": {
              "application/json": {
                "examples": {
                  "Response": {
                    "value": "{\n\"message\": \"Invalid user data.\"\n}"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "examples": {
                  "Response": {
                    "value": "{\n\"message\": \"User not found.\"\n}"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete a user account. This is a stretch goal and not MVP.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user's ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully deleted",
            "content": {
              "application/json": {
                "examples": {
                  "Response": {
                    "value": "{\n\"message\": \"User successfully deleted.\"\n}"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "examples": {
                  "Response": {
                    "value": "{\n\"message\": \"User not found.\"\n}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/create": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new user.",
        "description": "Creates a new user.",
        "operationId": "createUser",
        "requestBody": {
          "description": "User details for account creation",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "examples": {
                  "Response": {
                    "value": "{\n\"message\": \"Bad request.\"\n}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "User login",
        "operationId": "userLogin",
        "requestBody": {
          "description": "User credentials for authentication",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userName": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully authenticated",
            "content": {
              "application/json": {
                "examples": {
                  "Response": {
                    "value": "{\n\"message\": \"Successfully authenticated.\"\n}"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials",
            "content": {
              "application/json": {
                "examples": {
                  "Response": {
                    "value": "{\n\"message\": \"Invalid credentials.\"\n}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/favorites/{userId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Retrieve user favorites",
        "description": "Gets a list of the user's favorite items.",
        "operationId": "getUserFavorites",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user's ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved favorites",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Favorite"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid userId specified",
            "content": {
              "application/json": {
                "examples": {
                  "Response": {
                    "value": "{\n\"message\": \"Invalid userId specified.\"\n}"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "examples": {
                  "Response": {
                    "value": "{\n\"message\": \"User not found.\"\n}"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Add an item to favorites",
        "description": "Allows a user to mark a menu item as a favorite.",
        "operationId": "addUserFavorite",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user's ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Favorite"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Favorite item added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Favorite"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "examples": {
                  "Response": {
                    "value": "{\n\"message\": \"Invalid request body.\"\n}"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User ID not found",
            "content": {
              "application/json": {
                "examples": {
                  "Response": {
                    "value": "{\n\"message\": \"User not found.\"\n}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/favorites/{favoriteId}": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Remove a favorite item",
        "description": "Allows a user to remove an item from their favorites.",
        "operationId": "removeUserFavorite",
        "parameters": [
          {
            "name": "favoriteId",
            "in": "path",
            "required": true,
            "description": "The ID of the favorite item",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Favorite item removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Favorite"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Favorite item not found",
            "content": {
              "application/json": {
                "examples": {
                  "Response": {
                    "value": "{\n\"message\": \"Favorited item not found.\"\n}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/order": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Create a new order",
        "description": "Allows a user to create an order.",
        "operationId": "createOrder",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "examples": {
                  "Response": {
                    "value": "{\n\"message\": \"Invalid request body.\"\n}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/order/{orderId}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieve an order by ID",
        "description": "Fetches order details using the order's unique ID.",
        "operationId": "getOrderById",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "description": "The ID of the order",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "examples": {
                  "Response": {
                    "value": "{\n\"message\": \"Order not found.\"\n}"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Update an order",
        "description": "Updates an order.",
        "operationId": "updateOrder",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "description": "The ID of the order",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "examples": {
                  "Response": {
                    "value": "{\n\"message\": \"Invalid request body.\"\n}"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "examples": {
                  "Response": {
                    "value": "{\n\"message\": \"Order not found.\"\n}"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Delete an order.",
        "description": "Used to remove a cart.",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "description": "The ID of the order",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order successfully deleted",
            "content": {
              "application/json": {
                "examples": {
                  "Response": {
                    "value": "{\n\"message\": \"Order successfully deleted.\"\n}"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "examples": {
                  "Response": {
                    "value": "{\n\"message\": \"Order not found.\"\n}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/order/user/{userId}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get all orders for a user",
        "description": "Fetches all past orders placed by a specific user.",
        "operationId": "getUserOrders",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The ID of the user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Orders retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No orders found for user",
            "content": {
              "application/json": {
                "examples": {
                  "Response": {
                    "value": "{\n\"message\": \"No orders found for user.\"\n}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/menu": {
      "get": {
        "tags": [
          "Menu"
        ],
        "summary": "Retrieve all menu items",
        "description": "Gets a list of all available tea and snack menu items.",
        "operationId": "getMenuItems",
        "responses": {
          "200": {
            "description": "Successfully retrieved menu items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/menu/{itemId}": {
      "get": {
        "tags": [
          "Menu"
        ],
        "summary": "Retrieve a menu item by ID",
        "description": "Fetches a specific tea or snack item from the menu.",
        "operationId": "getMenuItemById",
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "description": "The ID of the menu item",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Menu item found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "404": {
            "description": "Menu item not found",
            "content": {
              "application/json": {
                "examples": {
                  "Response": {
                    "value": "{\n\"message\": \"Item not found.\"\n}"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Menu"
        ],
        "summary": "Update an item (stretch goal, not MVP)",
        "description": "Updates an item.",
        "operationId": "updateMenuItem",
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "description": "The ID of the item",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Item"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "examples": {
                  "Response": {
                    "value": "{\n\"message\": \"Invalid request body.\"\n}"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Menu item not found",
            "content": {
              "application/json": {
                "examples": {
                  "Response": {
                    "value": "{\n\"message\": \"Item not found.\"\n}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/menu/featuredItems": {
      "get": {
        "tags": [
          "Menu"
        ],
        "summary": "Retrieve all featured items",
        "description": "Fetches all featured items from the menu.",
        "operationId": "getFeaturedItems",
        "responses": {
          "200": {
            "description": "Featured items found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/menu/addIns": {
      "get": {
        "tags": [
          "Menu"
        ],
        "summary": "Retrieve all add-ins",
        "description": "Gets a list of all available add-ins.",
        "operationId": "getAddIns",
        "responses": {
          "200": {
            "description": "Successfully retrieved add-ins",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AddIn"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "MongoDB ObjectId"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "phone": {
            "type": "string"
          },
          "address": {
            "type": "object",
            "properties": {
              "line1": {
                "type": "string"
              },
              "line2": {
                "type": "string",
                "nullable": true
              },
              "city": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "zipcode": {
                "type": "string"
              }
            }
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "MongoDB ObjectId"
          },
          "userId": {
            "type": "string",
            "description": "Reference to a User (_id)"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "tea",
                    "snack"
                  ]
                },
                "itemId": {
                  "type": "string",
                  "description": "Reference to an Item (_id)"
                },
                "addIns": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Reference to an Add-In (_id)"
                      },
                      "name": {
                        "type": "string"
                      },
                      "amount": {
                        "type": "integer"
                      },
                      "price": {
                        "type": "number",
                        "format": "double"
                      }
                    }
                  }
                },
                "quantity": {
                  "type": "integer"
                },
                "price": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "bill": {
            "type": "object",
            "properties": {
              "subtotal": {
                "type": "number",
                "format": "double"
              },
              "tax": {
                "type": "number",
                "format": "double"
              },
              "tip": {
                "type": "number",
                "format": "double"
              },
              "total": {
                "type": "number",
                "format": "double"
              }
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "cart",
              "pending",
              "complete"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Item": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "MongoDB ObjectId"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "category": {
            "type": "string",
            "enum": [
              "featured",
              "seasonal",
              "milk",
              "fruit",
              "snacks"
            ]
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "alt": {
            "type": "string",
            "description": "Alt text for the item's image"
          },
          "reference": {
            "type": "string",
            "description": "APA citation for the item's image source"
          },
          "image": {
            "type": "string",
            "description": "Link address for the image's source."
          }
        }
      },
      "AddIn": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "MongoDB ObjectId"
          },
          "name": {
            "type": "string"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "description": {
            "type": "string"
          },
          "price": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "Favorite": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "MongoDB ObjectId"
          },
          "menuId": {
            "type": "string",
            "description": "Reference to an Item (_id)"
          },
          "userId": {
            "type": "string",
            "description": "Reference to a User (_id)"
          },
          "name": {
            "type": "string"
          },
          "addIns": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Reference to an Add-In (_id)"
                },
                "name": {
                  "type": "string"
                },
                "amount": {
                  "type": "integer"
                },
                "price": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "price": {
            "type": "number",
            "format": "double"
          }
        }
      }
    }
  }
}